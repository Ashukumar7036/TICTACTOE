{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","renderSquare","React","Component","toast","configure","Game","state","history","Array","fill","stepNumber","xIsNext","slice","length","calculateWinner","setState","concat","step","status","current","winner","map","move","desc","autoClose","success","key","jumpTo","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"6OAKA,SAASA,EAAOC,GACZ,OACE,4BAAQC,UAAU,SAASC,QAASF,EAAME,SACvCF,EAAMG,O,IAKNC,E,2KACQC,GAAI,IAAD,OACd,OACE,kBAACN,EAAD,CACEI,MAAOG,KAAKN,MAAMO,QAAQF,GAC1BH,QAAS,kBAAM,EAAKF,MAAME,QAAQG,Q,+BAKtC,OACE,6BACE,yBAAKJ,UAAU,aACZK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,IAErB,yBAAKP,UAAU,aACZK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,IAErB,yBAAKP,UAAU,aACZK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,S,GAzBRC,IAAMC,WA+BzBC,IAAMC,Y,IACFC,E,kDACJ,WAAYb,GAAQ,IAAD,8BACjB,cAAMA,IACDc,MAAQ,CACXC,QAAS,CACP,CACER,QAASS,MAAM,GAAGC,KAAK,QAG3BC,WAAY,EACZC,SAAS,GATM,E,wDAaPd,GACV,IAAMU,EAAUT,KAAKQ,MAAMC,QAAQK,MAAM,EAAGd,KAAKQ,MAAMI,WAAa,GAE9DX,EADUQ,EAAQA,EAAQM,OAAS,GACjBd,QAAQa,QAC5BE,EAAgBf,IAAYA,EAAQF,KAGxCE,EAAQF,GAAKC,KAAKQ,MAAMK,QAAU,IAAM,IACxCb,KAAKiB,SAAS,CACZR,QAASA,EAAQS,OAAO,CACtB,CACEjB,QAASA,KAGbW,WAAYH,EAAQM,OACpBF,SAAUb,KAAKQ,MAAMK,a,6BAIlBM,GACLnB,KAAKiB,SAAS,CACZL,WAAYO,EACZN,QAAUM,EAAO,IAAO,M,+BAIlB,IAkBJC,EAlBG,OACDX,EAAUT,KAAKQ,MAAMC,QACrBY,EAAUZ,EAAQT,KAAKQ,MAAMI,YAC7BU,EAASN,EAAgBK,EAAQpB,SAEzBQ,EAAQc,KAAI,SAACJ,EAAMK,GAChC,IAAMC,EAAOD,EACfnB,YAAM,eAAiBmB,EAAM,CAACE,UAAW,MACxCrB,IAAMsB,QAAQ,mBAAoB,CAACD,UAAW,MAC9C,OAEK,wBAAIE,IAAMJ,GACT,4BAAQ5B,QAAS,kBAAM,EAAKiC,OAAOL,KAAQC,OAajD,OALEL,EADEE,EACO,WAAaA,EAEb,iBAAmBtB,KAAKQ,MAAMK,QAAU,IAAM,KAIvD,yBAAKlB,UAAU,QACb,yBAAKA,UAAU,cACb,kBAACG,EAAD,CACEG,QAASoB,EAAQpB,QACjBL,QAAS,SAAAG,GAAC,OAAI,EAAK+B,YAAY/B,OAGnC,yBAAKJ,UAAU,aACb,6BAAMyB,S,GA1EGjB,IAAMC,WAsFzB,SAASY,EAAgBf,GAWvB,IAVA,IAAM8B,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAhC,EAAI,EAAGA,EAAIgC,EAAMhB,OAAQhB,IAAK,CAAC,IAAD,cACnBgC,EAAMhC,GADa,GAC9BiC,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAIjC,EAAQ+B,IAAM/B,EAAQ+B,KAAO/B,EAAQgC,IAAMhC,EAAQ+B,KAAO/B,EAAQiC,GACpE,OAAOjC,EAAQ+B,GAGnB,OAAO,KAnBTG,IAASC,OAAO,kBAAC7B,EAAD,MAAU8B,SAASC,eAAe,U","file":"static/js/main.f2aeeeaa.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {ToastContainer,toast}from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.min.css';\r\nimport './index.css';\r\nfunction Square(props) {\r\n    return (\r\n      <button className=\"square\" onClick={props.onClick}>\r\n        {props.value}\r\n      </button>\r\n    );\r\n  }\r\n \r\n   class Board extends React.Component {\r\n    renderSquare(i) {\r\n      return (\r\n        <Square\r\n          value={this.props.squares[i]}\r\n          onClick={() => this.props.onClick(i)}\r\n        />\r\n      );\r\n    }\r\n  render() {\r\n      return (\r\n        <div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(0)}\r\n            {this.renderSquare(1)}\r\n            {this.renderSquare(2)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(3)}\r\n            {this.renderSquare(4)}\r\n            {this.renderSquare(5)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(6)}\r\n            {this.renderSquare(7)}\r\n            {this.renderSquare(8)}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n    toast.configure()\r\n  class Game extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        history: [\r\n          {\r\n            squares: Array(9).fill(null)\r\n          }\r\n        ],\r\n        stepNumber: 0,\r\n        xIsNext: true\r\n      };\r\n    }\r\n\r\n    handleClick(i) {\r\n      const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n      const current = history[history.length - 1];\r\n      const squares = current.squares.slice();\r\n      if (calculateWinner(squares) || squares[i]) {\r\n        return;\r\n      }\r\n      squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n      this.setState({\r\n        history: history.concat([\r\n          {\r\n            squares: squares\r\n          }\r\n        ]),\r\n        stepNumber: history.length,\r\n        xIsNext: !this.state.xIsNext\r\n      });\r\n    }\r\n  \r\n    jumpTo(step) {\r\n      this.setState({\r\n        stepNumber: step,\r\n        xIsNext: (step % 2) === 0\r\n      });\r\n    }\r\n \r\n    render() {\r\n      const history = this.state.history;\r\n      const current = history[this.state.stepNumber];\r\n      const winner = calculateWinner(current.squares);\r\n  \r\n      const moves = history.map((step, move) => {\r\n       const desc = move ?\r\n     toast('Go to move #' + move, {autoClose: 4000}) :\r\n      toast.success('Go to game start', {autoClose: 3000});\r\n      return (\r\n\r\n           <li key= {move}>\r\n            <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n          \r\n          </li>\r\n        );\r\n      });\r\n\r\n      let status;\r\n      if (winner) {\r\n        status = \"Winner: \" + winner;\r\n      } else {\r\n        status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\r\n      }\r\n  \r\n      return (\r\n        <div className=\"game\">\r\n          <div className=\"game-board\">\r\n            <Board\r\n              squares={current.squares}\r\n              onClick={i => this.handleClick(i)}\r\n            />\r\n          </div>\r\n          <div className=\"game-info\">\r\n            <div>{status}</div>\r\n            {/* <ol>{moves}</ol> */}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n//   ========================================\r\n  \r\n  ReactDOM.render(<Game />, document.getElementById(\"root\"));\r\n  \r\n  function calculateWinner(squares) {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6]\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        return squares[a];\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  "],"sourceRoot":""}